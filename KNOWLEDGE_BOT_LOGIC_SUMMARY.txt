KNOWLEDGE BOT - COMPLETE LOGIC FLOW SUMMARY
=============================================

OVERVIEW
--------
The Knowledge Bot is a SeaTalk bot that automatically tracks Jira tickets moved to "2ND REVIEW" status and sends QA reminders to team members. It includes interactive buttons for completion tracking, follow-up reminders, and various management commands.

CORE COMPONENTS
---------------

1. DATA STRUCTURES
   - QAReminder: Tracks individual reminder state (IssueKey, QAName, QAEmail, SentTime, LastSentTime, Completed)
   - GroupMember: Team member information (Email, DisplayName, EmployeeCode)
   - JiraIssue: Jira ticket data from API calls
   - Various SeaTalk API message structures

2. GLOBAL STATE
   - qaReminders map: Stores all active reminders by ticket key
   - alertResponses map: Tracks user button clicks to prevent duplicates
   - Mutex locks: Thread-safe access to shared data

MAIN LOGIC FLOWS
================

A. AUTOMATED REMINDER SYSTEM
----------------------------

1. SCHEDULED DAILY CHECK (10:00 AM)
   - processQAReminders() runs automatically
   - Queries Jira for tickets in "2ND REVIEW" status
   - Filters tickets moved to 2nd review on current day or previous business day
   - Excludes weekends from "previous business day" calculation
   - Skips tickets that already have reminders sent
   - Sends new reminders to assigned QA team members

2. FOLLOW-UP REMINDERS (24 HOURS LATER)
   - processFollowUpReminders() runs automatically
   - Checks reminders sent 24+ hours ago that haven't been completed
   - Sends follow-up reminders with "[Follow-up Required]" prefix
   - Updates LastSentTime but preserves original SentTime

3. WEEKLY CLEANUP (MONDAY 12:00 AM)
   - cleanupOldReminders() runs automatically
   - Removes all completed reminders from memory
   - Keeps the system clean and prevents memory bloat

B. REMINDER CREATION & TRACKING
-------------------------------

1. NEW REMINDER PROCESS
   - getJiraIssue(): Fetches ticket details from Jira API
   - getGroupMembers(): Gets QA team member list
   - sendQAReminder(): Creates interactive message with buttons
   - Adds entry to qaReminders map with tracking info

2. INTERACTIVE MESSAGE FORMAT
   - Title: "üìö Knowledge Base Reminder" (or "[Follow-up Required]" for follow-ups)
   - Description: Includes QA mention, Jira link, review date, instructions
   - Buttons: "Complete ‚úÖ" and "Nothing to update ‚ùå"
   - Uses SeaTalk mention format: <mention-tag target="seatalk://user?email=xxx@xxx.com"/>

3. BUTTON ID SYSTEM
   - Regular reminders: Uses ticket key directly (e.g., "SPB-12345")
   - Mock reminders: Uses "MOCK_" prefix (e.g., "MOCK_SPB-12345")
   - Ensures buttons from group and private messages are linked

C. USER INTERACTION HANDLING
----------------------------

1. BUTTON CLICK PROCESSING
   - handleButtonClick(): Processes all button interactions
   - Extracts ticket key from button value
   - Checks for duplicate clicks (prevents spam)
   - Verifies user authorization (only assigned QA can click)
   - Updates reminder completion status
   - Sends confirmation message with Jira link

2. AUTHORIZATION SYSTEM
   - Only the QA member assigned to a specific ticket can click its buttons
   - Unauthorized users receive private message explaining restriction
   - Prevents accidental or malicious button clicks

3. DUPLICATE CLICK PREVENTION
   - Tracks user responses in alertResponses map
   - Blocks same user from clicking same button multiple times
   - Allows different users to click different buttons for same ticket

D. COMMAND SYSTEM
-----------------

1. PRIVATE MESSAGE COMMANDS
   - "help": Shows available commands and features
   - "status": Shows user's pending reminders with interactive buttons
   - "list": Shows all completed (this week) and pending reminders
   - "jira": Manually triggers QA reminder processing
   - "mock": Sends test reminder for testing purposes

2. GROUP MESSAGE COMMANDS
   - "@KnowledgeBot list": Shows all reminders to entire group
   - "@KnowledgeBot help": Shows available group commands
   - "@KnowledgeBot debug": Shows group ID for configuration
   - Default case: Responds with available commands for unrecognized messages

3. COMMAND PROCESSING
   - handlePrivateMessage(): Processes private message commands
   - handleGroupMessage(): Processes group message commands
   - Uses switch statements for clean command routing

E. JIRA INTEGRATION
-------------------

1. API CONFIGURATION
   - Uses environment variables: JIRA_BASE_URL, JIRA_USERNAME, JIRA_API_TOKEN
   - Basic authentication for API calls
   - Error handling for API failures

2. QUERY SYSTEM
   - JQL queries to find tickets in "2ND REVIEW" status
   - Fetches ticket details including status transitions
   - Parses timestamps to determine when tickets moved to 2nd review

3. DATE PROCESSING
   - getSecondReviewTime(): Extracts timestamp from Jira status transitions
   - getSecondReviewDate(): Formats date for display
   - wasMovedToSecondReviewRecently(): Business day logic for filtering

F. MESSAGE SENDING SYSTEM
-------------------------

1. SEA TALK API INTEGRATION
   - SendMessageToGroup(): Regular text messages to group
   - SendMessageToUser(): Private messages to users
   - SendInteractiveMessageToGroup(): Interactive messages with buttons

2. MESSAGE FORMATTING
   - Markdown formatting for rich text
   - Proper mention tags for user notifications
   - Jira links for easy ticket access
   - Emoji usage for visual appeal

3. ERROR HANDLING
   - Comprehensive error logging
   - Graceful failure handling
   - User-friendly error messages

G. BUSINESS LOGIC RULES
-----------------------

1. REMINDER FILTERING
   - Only tickets moved to 2nd review on current day or previous business day
   - Excludes weekends from business day calculations
   - Prevents duplicate reminders for same ticket
   - Skips tickets already completed

2. FOLLOW-UP TIMING
   - 24-hour delay before follow-up reminders
   - Only for incomplete reminders
   - Preserves original sent time for response time calculations

3. CLEANUP SCHEDULE
   - Weekly cleanup on Monday at midnight
   - Removes all completed reminders
   - Keeps system memory usage low

H. SECURITY & AUTHORIZATION
---------------------------

1. USER IDENTIFICATION
   - Private messages: Full user info available (email, name, etc.)
   - Group messages: Limited user info (no email field)
   - Fallback to employee codes when email unavailable

2. BUTTON AUTHORIZATION
   - Cross-references clicker email with reminder QA email
   - Prevents unauthorized button clicks
   - Provides clear feedback for unauthorized attempts

3. ENVIRONMENT SECURITY
   - API credentials stored in environment variables
   - .env file excluded from version control
   - ENV_SETUP.md provides configuration guidance

I. TESTING & DEBUGGING
----------------------

1. MOCK SYSTEM
   - "mock" command creates test reminders
   - Uses fake ticket data for testing
   - Full button functionality for testing workflows

2. DEBUG COMMANDS
   - "debug" command shows group ID and configuration
   - Comprehensive logging throughout the system
   - Error tracking and reporting

3. STATUS MONITORING
   - "status" command shows user's pending reminders
   - "list" command shows team-wide status
   - Real-time tracking of reminder states

J. CONFIGURATION & DEPLOYMENT
-----------------------------

1. ENVIRONMENT SETUP
   - run.sh script for easy startup
   - .env file for local configuration
   - ENV_SETUP.md for setup instructions

2. SCHEDULING SYSTEM
   - Cron-like scheduling for automated tasks
   - Daily reminders at 10:00 AM
   - Weekly cleanup on Monday midnight
   - 24-hour follow-up timing

3. PORT CONFIGURATION
   - Configurable port via environment variable
   - Default port 8080
   - Port conflict detection and resolution

SUMMARY
-------
The Knowledge Bot is a comprehensive system that automates QA reminder workflows, provides interactive user interfaces, maintains data integrity, and offers extensive management capabilities. It integrates seamlessly with Jira and SeaTalk while providing robust error handling, security, and user experience features.

The system is designed to be maintainable, scalable, and user-friendly, with clear separation of concerns and comprehensive logging for troubleshooting and monitoring.

http://docs.google.com/spreadsheets/d/1QlBZniYwL5VqKW1KQxjTs4LEGqOJ8YWRFTLhX-MZBtU/edit?gid=295148550#gid=295148550
